{"version":3,"sources":["../../../src/lib/utils/barWidth.js"],"names":["plotDataLengthBarWidth","timeIntervalBarWidth","props","moreProps","widthRatio","scale","xScale","accessor","xAccessor","plotData","width","Math","abs","length","interval","first","offset"],"mappings":"AAAA;;;;;QAWgBA,sB,GAAAA,sB;QAaAC,oB,GAAAA,oB;;AAtBhB;;AAEA;;;;;;;AAOO,SAASD,sBAAT,CAAgCE,KAAhC,EAAuCC,SAAvC,EAAkD;AAAA,0BACfD,KADe,CAChDE,UADgD;AAAA,MACpCA,UADoC,qCACvB,GADuB;AAAA,MAExCC,KAFwC,GAECF,SAFD,CAEhDG,MAFgD;AAAA,MAEtBC,QAFsB,GAECJ,SAFD,CAEjCK,SAFiC;AAAA,MAEZC,QAFY,GAECN,SAFD,CAEZM,QAFY;;;AAIxD,MAAMC,QAAQC,KAAKC,GAAL,CAAS,CAACP,MAAME,SAAS,iBAAKE,QAAL,CAAT,CAAN,IAAkCJ,MAAME,SAAS,iBAAKE,QAAL,CAAT,CAAN,CAAnC,KAAuEA,SAASI,MAAT,GAAkB,CAAzF,CAAT,CAAd;AACA,SAAOH,QAAQN,UAAf;AACA;;AAED;;;;;AAKO,SAASH,oBAAT,CAA8Ba,QAA9B,EAAwC;AAC9C,SAAO,UAASZ,KAAT,EAAgBC,SAAhB,EAA2B;AAAA,6BACQD,KADR,CACzBE,UADyB;AAAA,QACbA,UADa,sCACA,GADA;AAAA,QAEjBC,KAFiB,GAEwBF,SAFxB,CAEzBG,MAFyB;AAAA,QAECC,QAFD,GAEwBJ,SAFxB,CAEVK,SAFU;AAAA,QAEWC,QAFX,GAEwBN,SAFxB,CAEWM,QAFX;;;AAIjC,QAAMM,QAAQR,SAAS,iBAAKE,QAAL,CAAT,CAAd;AACA,WAAOE,KAAKC,GAAL,CAASP,MAAMS,SAASE,MAAT,CAAgBD,KAAhB,EAAuB,CAAvB,CAAN,IAAmCV,MAAMU,KAAN,CAA5C,IAA4DX,UAAnE;AACA,GAND;AAOA","file":"barWidth.js","sourcesContent":["\"use strict\";\n\nimport { head, last } from \"../utils\";\n\n/**\n * Bar width is based on the amount of items in the plot data and the distance between the first and last of those\n * items.\n * @param props the props passed to the series.\n * @param moreProps an object holding the xScale, xAccessor and plotData.\n * @return {number} the bar width.\n */\nexport function plotDataLengthBarWidth(props, moreProps) {\n\tconst { widthRatio: widthRatio = 0.8 } = props;\n\tconst { xScale: scale, xAccessor: accessor, plotData } = moreProps;\n\n\tconst width = Math.abs((scale(accessor(last(plotData))) - scale(accessor(head(plotData)))) / (plotData.length - 1));\n\treturn width * widthRatio;\n}\n\n/**\n * Generates a width function that calculates the bar width based on the given time interval.\n * @param interval a d3-time time interval.\n * @return {Function} the width function.\n */\nexport function timeIntervalBarWidth(interval) {\n\treturn function(props, moreProps) {\n\t\tconst { widthRatio: widthRatio = 0.8 } = props;\n\t\tconst { xScale: scale, xAccessor: accessor, plotData } = moreProps;\n\n\t\tconst first = accessor(head(plotData));\n\t\treturn Math.abs(scale(interval.offset(first, 1)) - scale(first)) * widthRatio;\n\t};\n}\n"]}