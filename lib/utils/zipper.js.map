{"version":3,"sources":["../../../src/lib/utils/zipper.js"],"names":["zipper","combine","zip","n","arguments","length","m","d3_zipLength","i","zips","Array","j","apply","d","x"],"mappings":"AAAA;;AAEA;;;;;kBAMwBA,M;;AAJxB;;AAEA;;;;;;AAEe,SAASA,MAAT,GAAkB;AAChC,KAAIC,4BAAJ;;AAEA,UAASC,GAAT,GAAe;AACd,MAAMC,IAAIC,UAAUC,MAApB;AACA,MAAI,CAACF,CAAL,EAAQ,OAAO,EAAP;AACR,MAAMG,IAAI,kBAAIF,SAAJ,EAAeG,YAAf,CAAV;;AAEA;AACA,MAAIC,UAAJ;AAAA,MAAOC,OAAO,IAAIC,KAAJ,CAAUJ,CAAV,CAAd;AACA,OAAKE,IAAI,CAAC,CAAV,EAAa,EAAEA,CAAF,GAAMF,CAAnB,GAAwB;AACvB,QAAK,IAAIK,IAAI,CAAC,CAAT,EAAYT,OAAMO,KAAKD,CAAL,IAAU,IAAIE,KAAJ,CAAUP,CAAV,CAAjC,EAA+C,EAAEQ,CAAF,GAAMR,CAArD,GAA0D;AACzDD,SAAIS,CAAJ,IAASP,UAAUO,CAAV,EAAaH,CAAb,CAAT;AACA;AACDC,QAAKD,CAAL,IAAUP,QAAQW,KAAR,CAAc,IAAd,EAAoBH,KAAKD,CAAL,CAApB,CAAV;AACA;AACD,SAAOC,IAAP;AACA;AACD,UAASF,YAAT,CAAsBM,CAAtB,EAAyB;AACxB,SAAOA,EAAER,MAAT;AACA;AACDH,KAAID,OAAJ,GAAc,UAASa,CAAT,EAAY;AACzB,MAAI,CAACV,UAAUC,MAAf,EAAuB;AACtB,UAAOJ,OAAP;AACA;AACDA,YAAUa,CAAV;AACA,SAAOZ,GAAP;AACA,EAND;AAOA,QAAOA,GAAP;AACA","file":"zipper.js","sourcesContent":["\"use strict\";\n\n/* an extension to d3.zip so we call a function instead of an array */\n\nimport { min } from \"d3-array\";\n\nimport identity from \"./identity\";\n\nexport default function zipper() {\n\tlet combine = identity;\n\n\tfunction zip() {\n\t\tconst n = arguments.length;\n\t\tif (!n) return [];\n\t\tconst m = min(arguments, d3_zipLength);\n\n\t\t// eslint-disable-next-line prefer-const\n\t\tlet i, zips = new Array(m);\n\t\tfor (i = -1; ++i < m; ) {\n\t\t\tfor (let j = -1, zip = zips[i] = new Array(n); ++j < n; ) {\n\t\t\t\tzip[j] = arguments[j][i];\n\t\t\t}\n\t\t\tzips[i] = combine.apply(this, zips[i]);\n\t\t}\n\t\treturn zips;\n\t}\n\tfunction d3_zipLength(d) {\n\t\treturn d.length;\n\t}\n\tzip.combine = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn combine;\n\t\t}\n\t\tcombine = x;\n\t\treturn zip;\n\t};\n\treturn zip;\n}\n"]}